# .github/workflows/ci.yml
# CI pipeline with lint, type-check, tests, coverage gate, and Codecov upload.
# Each step includes a brief comment so reviewers can follow along.

name: CI

on:
  push:
    branches: [ main, feat/** ]         # Run on main and all feature branches
  pull_request:
    branches: [ main ]                  # Validate PRs targeting main

# Required by some actions (e.g., Codecov) to read repo contents.
# ← allow Codecov to post PR status/comments
permissions:
  contents: read
  pull-requests: write   


jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out repository code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Set up Python (match your README/tooling)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) Cache pip downloads between runs (faster CI)
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4) Install project deps + QA/tooling used in CI
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          # QA tools
          pip install ruff mypy pytest pytest-cov pyarrow fastparquet types-PyYAML

      # 5) Lint (fail fast on style issues)
      - name: Ruff (lint)
        run: ruff check .

      # 6) Static typing
      - name: Mypy (type check)
        run: mypy --ignore-missing-imports .

            # 7) Run tests with coverage and enforce >= 80%
      - name: Pytest (with coverage XML + 80% gate)
        run: |
          export PYTHONPATH=$PWD                               # ensure imports from repo root
          pytest -q --cov=./ \                                 # run tests + measure coverage
                    --cov-report=xml \                         # write ./coverage.xml
                    --cov-report=term-missing \                # print uncovered lines in CI log
                    --cov-fail-under=80                        # 🔒 fail CI if < 80%

          # --- Diagnostics: confirm coverage file exists and show size ---
          test -f coverage.xml || (echo "coverage.xml not found!" && exit 1)
          echo "coverage.xml size (bytes):"
          wc -c coverage.xml || true
          echo "First 5 lines of coverage.xml:"
          head -n 5 coverage.xml || true

      # 8) Upload coverage to Codecov (verbose for troubleshooting)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml             # exact path we just created
          flags: unittests
          disable_search: true              # don't scan; trust the path
          fail_ci_if_error: true            # fail if upload fails
          token: ${{ secrets.CODECOV_TOKEN }} # repo secret you created
          verbose: true                     # 👈 print detailed logs

      # 9) Save coverage.xml as an artifact (handy for debugging)
      - name: Save coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
